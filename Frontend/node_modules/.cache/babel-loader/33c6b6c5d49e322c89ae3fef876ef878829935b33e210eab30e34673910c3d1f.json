{"ast":null,"code":"import React,{useState}from'react';import EmployeeForm from'./EmployeeForm';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const Dashboard=()=>{const[employees,setEmployees]=useState([]);const[error,setError]=useState('');const[isDatabaseVisible,setIsDatabaseVisible]=useState(false);const[employeeToUpdate,setEmployeeToUpdate]=useState(null);// Track employee to update\nconst viewDatabase=async()=>{try{const response=await fetch('/api/employees');if(!response.ok){throw new Error('Failed to fetch employees');}const data=await response.json();setEmployees(data);setIsDatabaseVisible(true);}catch(err){setError('Error connecting to the server. Please try again.');}};const updateEmployee=employee=>{setEmployeeToUpdate(employee);// Set the employee data to be updated\n};const deleteEmployee=async id=>{try{const response=await fetch(`/api/employees/${id}`,{method:'DELETE'});if(response.ok){setEmployees(prevEmployees=>prevEmployees.filter(employee=>employee.id!==id));}}catch(err){setError('Error deleting employee. Please try again.');}};const handleUpdateSuccess=()=>{setEmployeeToUpdate(null);// Clear the employee being updated\nviewDatabase();// Refresh the data after update\n};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Employee Management Dashboard\"}),/*#__PURE__*/_jsx(\"h2\",{children:\"Add New Employee\"}),/*#__PURE__*/_jsx(EmployeeForm,{employeeToUpdate:null// No employee to update for the \"Add New Employee\" form\n,onSubmit:viewDatabase// Reload employees after adding\n}),/*#__PURE__*/_jsx(\"button\",{onClick:viewDatabase,children:\"View Database\"}),error&&/*#__PURE__*/_jsx(\"p\",{style:{color:'red'},children:error}),isDatabaseVisible&&employees.length>0?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Name\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Employee ID\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Email\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Phone\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Department\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Date of Joining\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Role\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Action\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:employees.map(employee=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:employee.name}),/*#__PURE__*/_jsx(\"td\",{children:employee.employee_id}),/*#__PURE__*/_jsx(\"td\",{children:employee.email}),/*#__PURE__*/_jsx(\"td\",{children:employee.phone}),/*#__PURE__*/_jsx(\"td\",{children:employee.department}),/*#__PURE__*/_jsx(\"td\",{children:employee.date_of_joining}),/*#__PURE__*/_jsx(\"td\",{children:employee.role}),/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>updateEmployee(employee),children:\"Update\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>deleteEmployee(employee.id),children:\"Delete\"})]})]},employee.id))})]}),employeeToUpdate&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Update Employee\"}),/*#__PURE__*/_jsx(EmployeeForm,{employeeToUpdate:employeeToUpdate,onSubmit:viewDatabase// Reload employees after adding\n,onUpdate:handleUpdateSuccess// Refresh after updating\n})]})]}):isDatabaseVisible&&/*#__PURE__*/_jsx(\"p\",{children:\"No employees found.\"})]});};export default Dashboard;","map":{"version":3,"names":["React","useState","EmployeeForm","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Dashboard","employees","setEmployees","error","setError","isDatabaseVisible","setIsDatabaseVisible","employeeToUpdate","setEmployeeToUpdate","viewDatabase","response","fetch","ok","Error","data","json","err","updateEmployee","employee","deleteEmployee","id","method","prevEmployees","filter","handleUpdateSuccess","children","onSubmit","onClick","style","color","length","map","name","employee_id","email","phone","department","date_of_joining","role","onUpdate"],"sources":["C:/Users/LENOVO/OneDrive/Desktop/projects/employee-management/Frontend/src/components/Dashboard.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport EmployeeForm from './EmployeeForm';\r\n\r\nconst Dashboard = () => {\r\n  const [employees, setEmployees] = useState([]);\r\n  const [error, setError] = useState('');\r\n  const [isDatabaseVisible, setIsDatabaseVisible] = useState(false);\r\n  const [employeeToUpdate, setEmployeeToUpdate] = useState(null); // Track employee to update\r\n\r\n  const viewDatabase = async () => {\r\n    try {\r\n      const response = await fetch('/api/employees');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch employees');\r\n      }\r\n      const data = await response.json();\r\n      setEmployees(data);\r\n      setIsDatabaseVisible(true);\r\n    } catch (err) {\r\n      setError('Error connecting to the server. Please try again.');\r\n    }\r\n  };\r\n\r\n  const updateEmployee = (employee) => {\r\n    setEmployeeToUpdate(employee); // Set the employee data to be updated\r\n  };\r\n\r\n  const deleteEmployee = async (id) => {\r\n    try {\r\n      const response = await fetch(`/api/employees/${id}`, { method: 'DELETE' });\r\n      if (response.ok) {\r\n        setEmployees((prevEmployees) =>\r\n          prevEmployees.filter((employee) => employee.id !== id)\r\n        );\r\n      }\r\n    } catch (err) {\r\n      setError('Error deleting employee. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleUpdateSuccess = () => {\r\n    setEmployeeToUpdate(null); // Clear the employee being updated\r\n    viewDatabase(); // Refresh the data after update\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Employee Management Dashboard</h1>\r\n\r\n      {/* Employee Form to Add New Employee */}\r\n      <h2>Add New Employee</h2>\r\n      <EmployeeForm\r\n        employeeToUpdate={null} // No employee to update for the \"Add New Employee\" form\r\n        onSubmit={viewDatabase} // Reload employees after adding\r\n      />\r\n\r\n      {/* Button to View Database */}\r\n      <button onClick={viewDatabase}>View Database</button>\r\n\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n      {/* Show Employees Table */}\r\n      {isDatabaseVisible && employees.length > 0 ? (\r\n        <>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Employee ID</th>\r\n                <th>Email</th>\r\n                <th>Phone</th>\r\n                <th>Department</th>\r\n                <th>Date of Joining</th>\r\n                <th>Role</th>\r\n                <th>Action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {employees.map((employee) => (\r\n                <tr key={employee.id}>\r\n                  <td>{employee.name}</td>\r\n                  <td>{employee.employee_id}</td>\r\n                  <td>{employee.email}</td>\r\n                  <td>{employee.phone}</td>\r\n                  <td>{employee.department}</td>\r\n                  <td>{employee.date_of_joining}</td>\r\n                  <td>{employee.role}</td>\r\n                  <td>\r\n                    <button onClick={() => updateEmployee(employee)}>Update</button>\r\n                    <button onClick={() => deleteEmployee(employee.id)}>Delete</button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n\r\n          {/* Show the update form below the table when an employee is selected */}\r\n          {employeeToUpdate && (\r\n            <div>\r\n              <h2>Update Employee</h2>\r\n              <EmployeeForm\r\n                employeeToUpdate={employeeToUpdate}\r\n                onSubmit={viewDatabase} // Reload employees after adding\r\n                onUpdate={handleUpdateSuccess} // Refresh after updating\r\n              />\r\n            </div>\r\n          )}\r\n        </>\r\n      ) : (\r\n        isDatabaseVisible && <p>No employees found.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}